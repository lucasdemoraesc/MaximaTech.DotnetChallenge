#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
ENV ASPNETCORE_URLS=http://+:5000
RUN sed -i "s|DEFAULT@SECLEVEL=2|DEFAULT@SECLEVEL=0|g" /etc/ssl/openssl.cnf
RUN sed -i 's/MinProtocol = TLSv1.2/MinProtocol = TLSv0/g' /etc/ssl/openssl.cnf
RUN sed -i 's/DEFAULT@SECLEVEL=2/DEFAULT@SECLEVEL=0/g' /usr/lib/ssl/openssl.cnf
RUN sed -i 's/MinProtocol = TLSv1.2/MinProtocol = TLSv0/g' /usr/lib/ssl/openssl.cnf
WORKDIR /app

FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
WORKDIR /src
#
# copy csproj and restore as distinct layers
COPY *.sln .
COPY MaximaTech.DotnetChallenge.Api/*.csproj ./MaximaTech.DotnetChallenge.Api/
COPY MaximaTech.DotnetChallenge.Models/*.csproj ./MaximaTech.DotnetChallenge.Models/
COPY MaximaTech.DotnetChallenge.Tests/*.csproj ./MaximaTech.DotnetChallenge.Tests/
COPY MaximaTech.DotnetChallenge.Web/*.csproj ./MaximaTech.DotnetChallenge.Web/
#
RUN dotnet restore
#
COPY . .
WORKDIR "/src/MaximaTech.DotnetChallenge.Api"
RUN dotnet build "MaximaTech.DotnetChallenge.Api.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "MaximaTech.DotnetChallenge.Api.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "MaximaTech.DotnetChallenge.Api.dll"]
